%{
	#include "bp.hpp"
	#include "hw5.hpp"
	#include "output.hpp"
	#include <stdlib.h>
	#include <iostream>
	#include <sstream>
	#include <string>
	#include <map>
	#include <stack>
	#include <string>
  
	using namespace std;
	using namespace output;

	extern int yylineno;
	extern int yylex();
	void yyerror(const char* c);

	//types
	typedef struct
	{
		string name;
		string type;
		int offset;
		string var;
		list<int> trueList;
		list<int> falseList;
	} var;

	stack<int> scopes;
	map<int,var> var_map;
	
	int TempVarCounter = 0;

	//validation func
	void typesCompatible(YYSTYPE left, YYSTYPE right);
	void typesCompatible(var left, YYSTYPE right);
	void numopCompatible(YYSTYPE left, YYSTYPE right);
	void logOpCompatible(YYSTYPE left, YYSTYPE right);
	bool isCurrency(YYSTYPE variable);
	bool isCurrency(var variable);
	var& getVar(YYSTYPE var);
	var& getVar(var varname);
	void ifNotBoolExit(YYSTYPE variable);
	string getMultTypeOrExit(YYSTYPE left, YYSTYPE right);
	string getDivTypeOrExit(YYSTYPE left, YYSTYPE right);
	void ifNotNumExit(YYSTYPE a);
	void ifNotNumExit(var a);
	void ifNotCurrencyExit(YYSTYPE a);

	//legal break;
	int WhileLoopCount = 0;
	void ifNotInWhileExit();

	//scope management
	void startScope();
	void endScopeWrapper(string str);
	void addVarToScope(string name, string type);
	void ifVarNotDeclaredExit(string name);
	void ifVarAlreadyDeclaredInScopeExit(string name);
	int getStartOfScope();
	int getEndOfScope();
	

	// code generation
	void genCodeAssign(YYSTYPE id, string ExpType, string expVar);
	void genCodePrint(YYSTYPE name);
	void genCodeInput(YYSTYPE name);
	string genCodeExp(YYSTYPE v1, string op, YYSTYPE v2);
	string getCurrTemp();

	//bool exp cod gen
	void genCodeANDExp(YYSTYPE* a, YYSTYPE* b, YYSTYPE* res, int markerAddress);
	void genCodeORExp(YYSTYPE* a, YYSTYPE* b, YYSTYPE* res, int markerAddress);
	void genCodeNOTExp(YYSTYPE* a, YYSTYPE* res);
	void genCodeTrueExp(YYSTYPE* a);
	void genCodeFalseExp(YYSTYPE* a);
	void genCodeRelOpExp(YYSTYPE* a, string rel_op, YYSTYPE* b, YYSTYPE* res);
	
	//if while
	void genCodeWhile(YYSTYPE* res, int markerOfExp, YYSTYPE* exp, int markerOfStat);
	void genCodeIfStat(YYSTYPE* res ,YYSTYPE* exp, int markerAddress);
	
	//when assign to a bool var
	void setListsToId(YYSTYPE id, YYSTYPE* exp);
	void setListsFromId(YYSTYPE *res, YYSTYPE id);


%}

%token LP RP LC RC 
%token SC COL
%token RUBLE DOLLAR EURO
%token PRINT INPUT ID 
%token INT STRING BOOL NUM
%token TRUE FALSE
%token IF WHILE BREAK SWITCH CASE
%right ASSIGN
%left OR
%left AND
%left REL_OP
%left PLUS MINUS
%left MULT DIV
%nonassoc A
%nonassoc ELSE
%right NOT

%%

Prog		:	{startScope();} Statements {endScopeWrapper("Close");} ;

Statements	:	Statements M Statement {$$.nextList = $3.nextList; bp($1.nextList,$2.nextAddress);}
			|	Statement
			;

Statement	:	LC {startScope();} Statements {endScopeWrapper("Close");} RC {$$.type="FakeClose";}
			|	Type ID SC {addVarToScope($2.name, $1.type); $$.type="Close";}
			| 	Type ID {addVarToScope($2.name, $1.type);} ASSIGN Exp SC {typesCompatible($1,$5); 
				$$.type="Close"; genCodeAssign($2, $5.type, $5.var); setListsToId($2, &$5);}
			|	ID ASSIGN Exp SC {ifVarNotDeclaredExit($1.name); typesCompatible(getVar($1), $3); 
				$$.type="FakeClose"; genCodeAssign($1, $3.type, $3.var); setListsToId($1, &$3);}
			|	PRINT ID SC {ifVarNotDeclaredExit($2.name); ifNotNumExit(getVar($2)); $$.type="FakeClose"; genCodePrint($2);}
			|	PRINT STRING SC {$$.type="FakeClose"; emit("print "+ $2.value);}
			|	INPUT ID SC {ifVarNotDeclaredExit($2.name); ifNotNumExit(getVar($2)); $$.type="FakeClose"; genCodeInput($2);}
			|	PrefixIF %prec A {$$.type="FakeClose"; ifNotBoolExit($1); $$.nextList=$1.nextList;}
			|	PrefixIF ELSE {startScope();} M Statement { endScopeWrapper($5.type); ifNotBoolExit($1); 
				$$.type="FakeClose"; bp($1.nextList,$4.nextAddress);}
			|	WHILE LP M Exp RP {startScope(); WhileLoopCount++;} M Statement 
				{ifNotBoolExit($4); endScopeWrapper($8.type); WhileLoopCount--; $$.type="FakeClose";
				genCodeWhile(&$$,$3.nextAddress,&$4,$7.nextAddress);}
			|	BREAK SC {ifNotInWhileExit(); $$.type="FakeClose"; genCodeBreak(&$$)}
			|	SWITCH LP Exp RP LC { startScope(); } CasesList {} RC {ifNotCurrencyExit($3); 
				endScopeWrapper("Close"); $$.type="FakeClose";}
			;
			
PrefixIF 	: IF LP Exp RP { startScope();}  M Statement {$$.type=$3.type; endScopeWrapper($7.type); 
				genCodeIfStat(&$$,&$3,$6.nextAddress);} ;	

CasesList	:	CaseStat CasesList
			|	CaseStat
			;
			
CaseStat	:	CASE NUM CurrencyType COL {startScope();} Statement {endScopeWrapper($6.type);} BREAK SC ;

CurrencyType	:	RUBLE {$$.type = "RUBLE";}
				|	EURO {$$.type = "EURO";}
				|	DOLLAR {$$.type = "DOLLAR";}
				;

Type	:	CurrencyType {$$.type = $1.type;}
		|	INT {$$.type = "INT";}
		|	BOOL {$$.type = "BOOL";}
		;
		
Exp	:	LP Exp RP {$$.type = $2.type; $$.var = $2.var;}
	|	Exp PLUS Exp {numopCompatible($1,$3); $$.type=$1.type; $$.var = genCodeExp($1,"+",$3);}
	|	Exp MINUS Exp {numopCompatible($1,$3); $$.type=$1.type; $$.var = genCodeExp($1,"-",$3);}
	|	Exp MULT Exp {$$.type = getMultTypeOrExit($1,$3); $$.var = genCodeExp($1,"*",$3);}
	|	Exp DIV Exp {$$.type = getDivTypeOrExit($1,$3); $$.var = genCodeExp($1,"/",$3);}
	|	ID {ifVarNotDeclaredExit($1.name); $$.type = getVar($1).type; 
			$$.var = getVar($1).var; setListsFromId(&$$,$1);}
	|	NUM {$$.type="INT"; $$.var = $1.value;}
	|	NUM CurrencyType {$$.type=$2.type; $$.var = $1.value;}
	|	TRUE {$$.type="BOOL"; genCodeTrueExp(&$$); }
	|	FALSE {$$.type="BOOL"; genCodeFalseExp(&$$);}
	|	NOT Exp {ifNotBoolExit($2); $$.type="BOOL"; genCodeNOTExp(&$2,&$$);}
	|	Exp OR M Exp {logOpCompatible($1,$4); $$.type="BOOL"; genCodeORExp(&$1,&$4,&$$,$3.nextAddress); }
	|	Exp AND M Exp {logOpCompatible($1,$4); $$.type="BOOL"; genCodeANDExp(&$1,&$4,&$$,$3.nextAddress); }
	|	Exp REL_OP Exp {numopCompatible($1,$3); $$.type="BOOL"; genCodeRelOpExp(&$1,$2.value,&$3,&$$);}
;

M	: {$$.nextAddress = next();} ;

%%
void genCodeBreak(YYSTYPE *res){
	res->nextList = makelist(next());
	emit("goto ");
}

void setListsFromId(YYSTYPE *res,YYSTYPE id){
	res->trueList = getVar(id).trueList; 
	res->falseList = getVar(id).falseList;
}

void setListsToId(YYSTYPE id, YYSTYPE* exp){
	var& v = getVar(id);
	v.trueList = exp->trueList;
	v.falseList = exp->falseList;
}

void genCodeWhile(YYSTYPE* res, int markerOfExp, YYSTYPE* exp, int markerOfStat){

	bp(exp->trueList, markerOfStat);
	res->nextList = exp->falseList;
	
	ostringstream os;
	os << markerOfExp;
	emit("goto " + os.str());
}

void genCodeIfStat(YYSTYPE* res ,YYSTYPE* exp, int markerAddress){
	bp(exp->trueList, markerAddress);
	res->nextList = exp->falseList;
}

void genCodeANDExp(YYSTYPE* a, YYSTYPE* b, YYSTYPE* res, int markerAddress){
	bp(a->trueList, markerAddress);
	res->falseList = merge(a->falseList,b->falseList);
	res->trueList = b->trueList;
}

void genCodeORExp(YYSTYPE* a, YYSTYPE* b, YYSTYPE* res, int markerAddress){
	bp(a->falseList, markerAddress);
	res->trueList = merge(a->trueList,b->trueList);
	res->falseList = b->falseList;
}

void genCodeNOTExp(YYSTYPE* a, YYSTYPE* res){
	res->trueList = a->falseList;
	res->falseList = a->trueList;
}

void genCodeTrueExp(YYSTYPE* a){
	a->trueList = makelist(next());
	emit("goto ");
}

void genCodeFalseExp(YYSTYPE* a){
	a->falseList = makelist(next());
	emit("goto ");
}

void genCodeRelOpExp(YYSTYPE* a, string rel_op, YYSTYPE* b, YYSTYPE* res){
	list<int> alist;
	if(rel_op=="<=" || rel_op==">="){
		//res->trueList = makelist(next());
		alist = makelist(next());
		emit("if " + a->var + "==" + b->var + "goto ");
		rel_op == "<=" ? rel_op = "<" : rel_op = ">";
	}
	
//	res->trueList != NULL) ? 
//		res->trueList = merge(res->trueList ,makelist(next())) : 
//		res->trueList = makelist(next());

	res->trueList = merge(makelist(next()), alist);
		
	emit("if " + a->var + rel_op + b->var + "goto ");
	
	res->falseList = makelist(next());
	emit("goto ");
}


string coerseType(string typeTo, string typeFrom, string var){
	if(typeFrom==typeTo) return var;
	string newVar = newTemp();
	if(typeFrom=="EURO") { emit(newVar + "=" + var + "* 70"); }
	else if (typeFrom=="DOLLAR") { emit(newVar + "=" + var + "* 65"); }
	
	if(typeTo=="EURO") { emit(newVar + "=" + newVar + "/ 70"); }
	else if (typeTo=="DOLLAR") { emit(newVar + "=" + newVar + "/ 65"); }
	
	return newVar;
}

void genCodeAssign(YYSTYPE id, string ExpType, string expVar){
	expVar = coerseType(getVar(id).type, ExpType, expVar);
	emit(getVar(id).var + "=" + expVar);
}

string genCodeExp(YYSTYPE v1, string op, YYSTYPE v2){
	
	string var1 = v1.var;
	string var2 = v2.var;
	
	var2 = coerseType(v1.type, v2.type, var2);
	
	string newVar = newTemp();
	emit(newVar + "=" + var1 + op + var2);
	
	return newVar;
}

void genCodePrint(YYSTYPE name){
	emit("input " + getVar(name).var);
}

void genCodeInput(YYSTYPE name){
	emit("input " + getVar(name).var);
}

string newTemp(){
	string res = getCurrTemp();
	TempVarCounter++;
	return res;
}

string getCurrTemp(){
	ostringstream os;
	os << TempVarCounter;
	return "s[" + os.str() + "]";
}

//////////////////////////////////////////////////////////////

void yyerror(const char* c){
	errorSyn(yylineno);
	exit(1);
}

void typesCompatible(YYSTYPE left, YYSTYPE right)
{
  if(left.type!=right.type) 
  {
    if(!(isCurrency(left) && isCurrency(right))) { errorMismatch(yylineno); exit(1); }
  }
}

void typesCompatible(var left, YYSTYPE right)
{
  if(left.type!=right.type) 
  {
    if(!(isCurrency(left) && isCurrency(right))) { errorMismatch(yylineno); exit(1); }
  }
}

void logOpCompatible(YYSTYPE left, YYSTYPE right)
{
  if(left.type!="BOOL" || right.type!="BOOL")
  {
    errorMismatch(yylineno);
    exit(1);
  }
}

void numopCompatible(YYSTYPE left, YYSTYPE right)
{
  typesCompatible(left,right);
  if( left.type=="BOOL" || right.type=="BOOL")
  {
    errorMismatch(yylineno); exit(1);
  }
}

bool isCurrency(YYSTYPE variable)
{
  return(variable.type=="RUBLE" || variable.type=="DOLLAR" || variable.type=="EURO");
}

bool isCurrency(var variable)
{
  return(variable.type=="RUBLE" || variable.type=="DOLLAR" || variable.type=="EURO");
}

void ifNotBoolExit(YYSTYPE variable)
{
  if(variable.type!="BOOL" ){ errorMismatch(yylineno); exit(1);} /*else cout << "out of it" << endl;*/
}

string getMultTypeOrExit(YYSTYPE left, YYSTYPE right){
	//if(isCurrency(left) && isCurrency(right)) { errorMismatch(yylineno); exit(1); }
	//else 
	if(isCurrency(left) && right.type=="INT" ) {return left.type;}
	else if(isCurrency(right) && left.type=="INT" ) {return right.type;}
	else if(left.type=="INT"  && right.type=="INT") {return left.type;}
	else {errorMismatch(yylineno); exit(1); }
}

string getDivTypeOrExit(YYSTYPE left, YYSTYPE right){
	if(isCurrency(left) && isCurrency(right)) {return "INT";}
	else if	(isCurrency(left) && right.type=="INT") {return left.type;}
	else if	(left.type=="INT" && right.type=="INT") {return "INT";}
	else{ errorMismatch(yylineno); exit(1); }
}


void ifNotNumExit(YYSTYPE a){
	if(!(a.type=="INT" || isCurrency(a))) {errorMismatch(yylineno); exit(1); }
}

void ifNotNumExit(var a){
	if(!(a.type=="INT" || isCurrency(a))) {errorMismatch(yylineno); exit(1); }
}

void ifNotCurrencyExit(YYSTYPE a){
	if(!isCurrency(a)) {errorMismatch(yylineno); exit(1); }
}

//MANAGE SCOPE
void startScope()
{
	if (scopes.empty()) {
		scopes.push(0);
		return;
	}
	scopes.push(scopes.top());
}

void endScopeWrapper(string str)
{
	//cout << "Entered endScopeWrapper with " << str << endl;
	int e_scope = scopes.top();
	scopes.pop();
	int s_scope=0;
	if (!(scopes.empty())) {
		s_scope=scopes.top();
	}
	
	//cout << "s_scope is " << s_scope << endl;
	//cout << "e_scope is " << e_scope << endl;

	if(str != "Close")
	{
		return;
	}
	
	endScope();
	for(int i =  s_scope; i < e_scope; i++)
	{
		printVar((var_map[i].name).c_str(),var_map[i].offset,(var_map[i].type).c_str());
		var_map.erase(i);
	}
}

void addVarToScope(string name, string type)
{
	var ezer;
	ezer.name = name;
	ezer.type = type;
	int target_offset;
	string tempVarName = newTemp();

	
//	for(int i = 0; i < var_map.size(); i++)
//	{
//		if(var_map[i].name == name)
//		{
//			errorDef(yylineno, name.c_str());
//			exit(1);
//		}
//	}
	ifVarAlreadyDeclaredInScopeExit(name);
	
	target_offset = scopes.top();
	ezer.offset = target_offset;
	var_map.insert(make_pair(target_offset, ezer));
	target_offset++;
	scopes.pop();
	scopes.push(target_offset);
}

void ifVarNotDeclaredExit(string name)
{
//	cout << "### Map size is " << var_map.size() << endl;
	for(int i = 0; i < var_map.size(); i++)
	{
//		cout << "###" + var_map[i].name << endl;
		if(var_map[i].name == name)
		{
			return;
		}
	}
	errorUndef(yylineno, name.c_str());
	exit(1);
}

var& getVar(YYSTYPE variable)
{
	ifVarNotDeclaredExit(variable.name);
	for(int i = var_map.size()-1; i>=0 ;i--)
	{
		if(var_map[i].name == variable.name)
		{
			return var_map[i];
		}
	}
	exit(1);
}

void ifVarAlreadyDeclaredInScopeExit(string name)
{
	int s_scope = getStartOfScope();
	int e_scope = getEndOfScope();
	
	for(int i = s_scope; i < e_scope; i++)
	{
		if(var_map[i].name == name)
		{
			errorDef(yylineno, name.c_str());
			exit(1);
		}
	}
}

int getStartOfScope()
{
	int temp = scopes.top();
	scopes.pop();
	int s_scope=0;
	if(!scopes.empty())
	    s_scope=scopes.top();
	scopes.push(temp);
	return s_scope;
}

int getEndOfScope()
{
	return scopes.top();
}

void ifNotInWhileExit(){
	if(WhileLoopCount==0){
		errorUnexpectedBreak(yylineno);
		exit(1);
	}
}

int main()
{
    #if YYDEBUG
        yydebug = 1;
    #endif
    yyparse();
}
